package pqt.dss.ptrf.model.eo.psr;

import java.sql.SQLException;

import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;

import javax.servlet.http.HttpSession;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Aug 19 12:46:00 PKT 2020
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DssPtPsrCommentsImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CcPsrCommentIdPk,
        PolNoFk,
        PsrRecievedDate,
        PsrRecievedStatus,
        PsrBoRemarks,
        UserIdFk,
        LastUpdatedBy,
        LastUpdatedDate,
        EnterDate,
        PsrAlterationStatus;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CCPSRCOMMENTIDPK = AttributesEnum.CcPsrCommentIdPk.index();
    public static final int POLNOFK = AttributesEnum.PolNoFk.index();
    public static final int PSRRECIEVEDDATE = AttributesEnum.PsrRecievedDate.index();
    public static final int PSRRECIEVEDSTATUS = AttributesEnum.PsrRecievedStatus.index();
    public static final int PSRBOREMARKS = AttributesEnum.PsrBoRemarks.index();
    public static final int USERIDFK = AttributesEnum.UserIdFk.index();
    public static final int LASTUPDATEDBY = AttributesEnum.LastUpdatedBy.index();
    public static final int LASTUPDATEDDATE = AttributesEnum.LastUpdatedDate.index();
    public static final int ENTERDATE = AttributesEnum.EnterDate.index();
    public static final int PSRALTERATIONSTATUS = AttributesEnum.PsrAlterationStatus.index();

    /**
     * This is the default constructor (do not remove).
     */
    public DssPtPsrCommentsImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("pqt.dss.ptrf.model.eo.psr.DssPtPsrComments");
    }


    /**
     * Gets the attribute value for CcPsrCommentIdPk, using the alias name CcPsrCommentIdPk.
     * @return the value of CcPsrCommentIdPk
     */
    public Number getCcPsrCommentIdPk() {
        return (Number) getAttributeInternal(CCPSRCOMMENTIDPK);
    }

    /**
     * Sets <code>value</code> as the attribute value for CcPsrCommentIdPk.
     * @param value value to set the CcPsrCommentIdPk
     */
    public void setCcPsrCommentIdPk(Number value) {
        setAttributeInternal(CCPSRCOMMENTIDPK, value);
    }

    /**
     * Gets the attribute value for PolNoFk, using the alias name PolNoFk.
     * @return the value of PolNoFk
     */
    public String getPolNoFk() {
        return (String) getAttributeInternal(POLNOFK);
    }

    /**
     * Sets <code>value</code> as the attribute value for PolNoFk.
     * @param value value to set the PolNoFk
     */
    public void setPolNoFk(String value) {
        setAttributeInternal(POLNOFK, value);
    }

    /**
     * Gets the attribute value for PsrRecievedDate, using the alias name PsrRecievedDate.
     * @return the value of PsrRecievedDate
     */
    public Date getPsrRecievedDate() {
        return (Date) getAttributeInternal(PSRRECIEVEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for PsrRecievedDate.
     * @param value value to set the PsrRecievedDate
     */
    public void setPsrRecievedDate(Date value) {
        setAttributeInternal(PSRRECIEVEDDATE, value);
    }

    /**
     * Gets the attribute value for PsrRecievedStatus, using the alias name PsrRecievedStatus.
     * @return the value of PsrRecievedStatus
     */
    public String getPsrRecievedStatus() {
        return (String) getAttributeInternal(PSRRECIEVEDSTATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for PsrRecievedStatus.
     * @param value value to set the PsrRecievedStatus
     */
    public void setPsrRecievedStatus(String value) {
        setAttributeInternal(PSRRECIEVEDSTATUS, value);
    }

    /**
     * Gets the attribute value for PsrBoRemarks, using the alias name PsrBoRemarks.
     * @return the value of PsrBoRemarks
     */
    public String getPsrBoRemarks() {
        return (String) getAttributeInternal(PSRBOREMARKS);
    }

    /**
     * Sets <code>value</code> as the attribute value for PsrBoRemarks.
     * @param value value to set the PsrBoRemarks
     */
    public void setPsrBoRemarks(String value) {
        setAttributeInternal(PSRBOREMARKS, value);
    }

    /**
     * Gets the attribute value for UserIdFk, using the alias name UserIdFk.
     * @return the value of UserIdFk
     */
    public Number getUserIdFk() {
        return (Number) getAttributeInternal(USERIDFK);
    }

    /**
     * Sets <code>value</code> as the attribute value for UserIdFk.
     * @param value value to set the UserIdFk
     */
    public void setUserIdFk(Number value) {
        setAttributeInternal(USERIDFK, value);
    }

    /**
     * Gets the attribute value for LastUpdatedBy, using the alias name LastUpdatedBy.
     * @return the value of LastUpdatedBy
     */
    public Number getLastUpdatedBy() {
        return (Number) getAttributeInternal(LASTUPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdatedBy.
     * @param value value to set the LastUpdatedBy
     */
    public void setLastUpdatedBy(Number value) {
        setAttributeInternal(LASTUPDATEDBY, value);
    }

    /**
     * Gets the attribute value for LastUpdatedDate, using the alias name LastUpdatedDate.
     * @return the value of LastUpdatedDate
     */
    public Date getLastUpdatedDate() {
        return (Date) getAttributeInternal(LASTUPDATEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdatedDate.
     * @param value value to set the LastUpdatedDate
     */
    public void setLastUpdatedDate(Date value) {
        setAttributeInternal(LASTUPDATEDDATE, value);
    }

    /**
     * Gets the attribute value for EnterDate, using the alias name EnterDate.
     * @return the value of EnterDate
     */
    public Date getEnterDate() {
        return (Date) getAttributeInternal(ENTERDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for EnterDate.
     * @param value value to set the EnterDate
     */
    public void setEnterDate(Date value) {
        setAttributeInternal(ENTERDATE, value);
    }


    /**
     * Gets the attribute value for PsrAlterationStatus, using the alias name PsrAlterationStatus.
     * @return the value of PsrAlterationStatus
     */
    public String getPsrAlterationStatus() {
        return (String) getAttributeInternal(PSRALTERATIONSTATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for PsrAlterationStatus.
     * @param value value to set the PsrAlterationStatus
     */
    public void setPsrAlterationStatus(String value) {
        setAttributeInternal(PSRALTERATIONSTATUS, value);
    }

    /**
     * @param ccPsrCommentIdPk key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number ccPsrCommentIdPk) {
        return new Key(new Object[] { ccPsrCommentIdPk });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
     protected void create(AttributeList attributeList) {
         super.create(attributeList);
         Date currentDate = new Date();
         setEnterDate((Date) currentDate.getCurrentDate());
         setLastUpdatedDate((Date) currentDate.getCurrentDate());
         SequenceImpl seq = new SequenceImpl("DSS_PT_PSR_COMMENTS_SEQ", getDBTransaction());
         setCcPsrCommentIdPk(seq.getSequenceNumber());
         
         FacesContext fctx = FacesContext.getCurrentInstance();
         ExternalContext ectx = fctx.getExternalContext();
         HttpSession userSession = (HttpSession) ectx.getSession(false);
         try {
             setUserIdFk(new Number(userSession.getAttribute("pUserId")));
             setLastUpdatedBy(new Number(userSession.getAttribute("pUserId")));
         } catch (SQLException ex) {
             setUserIdFk(new Number(0));
             setLastUpdatedBy(new Number(0));
         }
         }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

     /**
          * Custom DML update/insert/delete logic here.
          * @param operation the operation type
          * @param e the transaction event
          */
         protected void doDML(int operation, TransactionEvent e) {
             Date currentDate = new Date();
             if (operation == DML_UPDATE) {
                 setLastUpdatedDate((Date) currentDate.getCurrentDate());
                 FacesContext fctx = FacesContext.getCurrentInstance();
                 ExternalContext ectx = fctx.getExternalContext();
                 HttpSession userSession = (HttpSession) ectx.getSession(false);
                 try {
     //                    setUserIdFk(new Number(userSession.getAttribute("pUserId")));
                     setLastUpdatedBy(new Number(userSession.getAttribute("pUserId")));
                 } catch (SQLException ex) {
     //                    setUserIdFk(new Number(0));
                     setLastUpdatedBy(new Number(0));
                 }
             }
             super.doDML(operation, e);
         }
}

