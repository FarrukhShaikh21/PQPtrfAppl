package pqt.dss.ptrf.model.eo.psr;

import java.sql.SQLException;

import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;

import javax.servlet.http.HttpSession;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Sep 28 14:22:33 PKT 2021
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DssPtPsrCcCommentsEoImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        PolTransferIdPk,
        PolNoFk,
        Remarks,
        UserIdFk,
        EnterDate,
        LastUpdatedDate,
        LastUpdatedBy,
        Status,
        CallResponse,
        CallAttempt,
        Remarks1,
        Remarks2,
        StatusIdFk,
        CommentsType;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int POLTRANSFERIDPK = AttributesEnum.PolTransferIdPk.index();
    public static final int POLNOFK = AttributesEnum.PolNoFk.index();
    public static final int REMARKS = AttributesEnum.Remarks.index();
    public static final int USERIDFK = AttributesEnum.UserIdFk.index();
    public static final int ENTERDATE = AttributesEnum.EnterDate.index();
    public static final int LASTUPDATEDDATE = AttributesEnum.LastUpdatedDate.index();
    public static final int LASTUPDATEDBY = AttributesEnum.LastUpdatedBy.index();
    public static final int STATUS = AttributesEnum.Status.index();
    public static final int CALLRESPONSE = AttributesEnum.CallResponse.index();
    public static final int CALLATTEMPT = AttributesEnum.CallAttempt.index();
    public static final int REMARKS1 = AttributesEnum.Remarks1.index();
    public static final int REMARKS2 = AttributesEnum.Remarks2.index();
    public static final int STATUSIDFK = AttributesEnum.StatusIdFk.index();
    public static final int COMMENTSTYPE = AttributesEnum.CommentsType.index();

    /**
     * This is the default constructor (do not remove).
     */
    public DssPtPsrCcCommentsEoImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("pqt.dss.ptrf.model.eo.psr.DssPtPsrCcCommentsEo");
    }

    /**
     * Gets the attribute value for PolTransferIdPk, using the alias name PolTransferIdPk.
     * @return the value of PolTransferIdPk
     */
    public Number getPolTransferIdPk() {
        return (Number) getAttributeInternal(POLTRANSFERIDPK);
    }

    /**
     * Sets <code>value</code> as the attribute value for PolTransferIdPk.
     * @param value value to set the PolTransferIdPk
     */
    public void setPolTransferIdPk(Number value) {
        setAttributeInternal(POLTRANSFERIDPK, value);
    }

    /**
     * Gets the attribute value for PolNoFk, using the alias name PolNoFk.
     * @return the value of PolNoFk
     */
    public String getPolNoFk() {
        return (String) getAttributeInternal(POLNOFK);
    }

    /**
     * Sets <code>value</code> as the attribute value for PolNoFk.
     * @param value value to set the PolNoFk
     */
    public void setPolNoFk(String value) {
        setAttributeInternal(POLNOFK, value);
    }

    /**
     * Gets the attribute value for Remarks, using the alias name Remarks.
     * @return the value of Remarks
     */
    public String getRemarks() {
        return (String) getAttributeInternal(REMARKS);
    }

    /**
     * Sets <code>value</code> as the attribute value for Remarks.
     * @param value value to set the Remarks
     */
    public void setRemarks(String value) {
        setAttributeInternal(REMARKS, value);
    }

    /**
     * Gets the attribute value for UserIdFk, using the alias name UserIdFk.
     * @return the value of UserIdFk
     */
    public Number getUserIdFk() {
        return (Number) getAttributeInternal(USERIDFK);
    }

    /**
     * Sets <code>value</code> as the attribute value for UserIdFk.
     * @param value value to set the UserIdFk
     */
    public void setUserIdFk(Number value) {
        setAttributeInternal(USERIDFK, value);
    }

    /**
     * Gets the attribute value for EnterDate, using the alias name EnterDate.
     * @return the value of EnterDate
     */
    public Date getEnterDate() {
        return (Date) getAttributeInternal(ENTERDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for EnterDate.
     * @param value value to set the EnterDate
     */
    public void setEnterDate(Date value) {
        setAttributeInternal(ENTERDATE, value);
    }

    /**
     * Gets the attribute value for LastUpdatedDate, using the alias name LastUpdatedDate.
     * @return the value of LastUpdatedDate
     */
    public Date getLastUpdatedDate() {
        return (Date) getAttributeInternal(LASTUPDATEDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdatedDate.
     * @param value value to set the LastUpdatedDate
     */
    public void setLastUpdatedDate(Date value) {
        setAttributeInternal(LASTUPDATEDDATE, value);
    }

    /**
     * Gets the attribute value for LastUpdatedBy, using the alias name LastUpdatedBy.
     * @return the value of LastUpdatedBy
     */
    public Number getLastUpdatedBy() {
        return (Number) getAttributeInternal(LASTUPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdatedBy.
     * @param value value to set the LastUpdatedBy
     */
    public void setLastUpdatedBy(Number value) {
        setAttributeInternal(LASTUPDATEDBY, value);
    }

    /**
     * Gets the attribute value for Status, using the alias name Status.
     * @return the value of Status
     */
    public String getStatus() {
        return (String) getAttributeInternal(STATUS);
    }

    /**
     * Sets <code>value</code> as the attribute value for Status.
     * @param value value to set the Status
     */
    public void setStatus(String value) {
        setAttributeInternal(STATUS, value);
    }

    /**
     * Gets the attribute value for CallResponse, using the alias name CallResponse.
     * @return the value of CallResponse
     */
    public String getCallResponse() {
        return (String) getAttributeInternal(CALLRESPONSE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CallResponse.
     * @param value value to set the CallResponse
     */
    public void setCallResponse(String value) {
        setAttributeInternal(CALLRESPONSE, value);
    }

    /**
     * Gets the attribute value for CallAttempt, using the alias name CallAttempt.
     * @return the value of CallAttempt
     */
    public String getCallAttempt() {
        return (String) getAttributeInternal(CALLATTEMPT);
    }

    /**
     * Sets <code>value</code> as the attribute value for CallAttempt.
     * @param value value to set the CallAttempt
     */
    public void setCallAttempt(String value) {
        setAttributeInternal(CALLATTEMPT, value);
    }

    /**
     * Gets the attribute value for Remarks1, using the alias name Remarks1.
     * @return the value of Remarks1
     */
    public String getRemarks1() {
        return (String) getAttributeInternal(REMARKS1);
    }

    /**
     * Sets <code>value</code> as the attribute value for Remarks1.
     * @param value value to set the Remarks1
     */
    public void setRemarks1(String value) {
        setAttributeInternal(REMARKS1, value);
    }

    /**
     * Gets the attribute value for Remarks2, using the alias name Remarks2.
     * @return the value of Remarks2
     */
    public String getRemarks2() {
        return (String) getAttributeInternal(REMARKS2);
    }

    /**
     * Sets <code>value</code> as the attribute value for Remarks2.
     * @param value value to set the Remarks2
     */
    public void setRemarks2(String value) {
        setAttributeInternal(REMARKS2, value);
    }

    /**
     * Gets the attribute value for StatusIdFk, using the alias name StatusIdFk.
     * @return the value of StatusIdFk
     */
    public Number getStatusIdFk() {
        return (Number) getAttributeInternal(STATUSIDFK);
    }

    /**
     * Sets <code>value</code> as the attribute value for StatusIdFk.
     * @param value value to set the StatusIdFk
     */
    public void setStatusIdFk(Number value) {
        setAttributeInternal(STATUSIDFK, value);
    }

    /**
     * Gets the attribute value for CommentsType, using the alias name CommentsType.
     * @return the value of CommentsType
     */
    public String getCommentsType() {
        return (String) getAttributeInternal(COMMENTSTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CommentsType.
     * @param value value to set the CommentsType
     */
    public void setCommentsType(String value) {
        setAttributeInternal(COMMENTSTYPE, value);
    }


    /**
     * @param polTransferIdPk key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number polTransferIdPk) {
        return new Key(new Object[] { polTransferIdPk });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        Date currentDate = new Date();
        setEnterDate((Date) currentDate.getCurrentDate());
        setLastUpdatedDate((Date) currentDate.getCurrentDate());
        SequenceImpl seq = new SequenceImpl("DSS_PT_CC_COMMENTS_SEQ", getDBTransaction());
        setPolTransferIdPk(seq.getSequenceNumber());
        
        setCommentsType("PSR");
        
        FacesContext fctx = FacesContext.getCurrentInstance();
        ExternalContext ectx = fctx.getExternalContext();
        HttpSession userSession = (HttpSession) ectx.getSession(false);
        try {
            setUserIdFk(new Number(userSession.getAttribute("pUserId")));
            setLastUpdatedBy(new Number(userSession.getAttribute("pUserId")));
        } catch (SQLException ex) {
            setUserIdFk(new Number(0));
            setLastUpdatedBy(new Number(0));
        }
        }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
         * Custom DML update/insert/delete logic here.
         * @param operation the operation type
         * @param e the transaction event
         */
        protected void doDML(int operation, TransactionEvent e) {
            Date currentDate = new Date();
            if (operation == DML_UPDATE) {
                setLastUpdatedDate((Date) currentDate.getCurrentDate());
                FacesContext fctx = FacesContext.getCurrentInstance();
                ExternalContext ectx = fctx.getExternalContext();
                HttpSession userSession = (HttpSession) ectx.getSession(false);
                try {
    //                    setUserIdFk(new Number(userSession.getAttribute("pUserId")));
                    setLastUpdatedBy(new Number(userSession.getAttribute("pUserId")));
                } catch (SQLException ex) {
    //                    setUserIdFk(new Number(0));
                    setLastUpdatedBy(new Number(0));
                }
            }
            super.doDML(operation, e);
        }
}

