package pqt.dss.ptrf.model.am;

import java.sql.SQLException;

import java.sql.Types;

import javax.faces.application.FacesMessage;

import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;

import javax.servlet.http.HttpSession;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.ViewLinkImpl;


import oracle.jbo.server.ViewObjectImpl;

import oracle.jdbc.internal.OracleCallableStatement;

import oracle.jbo.domain.Number;

import oracle.sql.NUMBER;

import pqt.dss.ptrf.model.am.common.PtrfAM;
//import pqt.dss.ptrf.model.lov.PolicyNoVoLOV1;
import pqt.dss.ptrf.model.lov.PolicyNoVoLOVImpl;
import pqt.dss.ptrf.model.vo.DssPlanTransferHeaderViewImpl;
import pqt.dss.ptrf.model.vo.psr.DssPtPsrCommentsHeaderQVOImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Aug 11 14:29:11 PDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class PtrfAMImpl extends ApplicationModuleImpl implements PtrfAM {
    /**
     * This is the default constructor (do not remove).
     */
    public PtrfAMImpl() {
    }
    
    public void setSessionValue() {
        FacesContext fctx = FacesContext.getCurrentInstance();
        ExternalContext ectx = fctx.getExternalContext();
        HttpSession userSession = (HttpSession) ectx.getSession(false);
        userSession.setAttribute("SSV_UserType", "BO");
        userSession.setAttribute("pUserId", 274);
        userSession.setAttribute("CFlag", Boolean.TRUE);
        userSession.setAttribute("PFlag", Boolean.TRUE);
        userSession.setAttribute("UFlag", Boolean.TRUE);
        userSession.setAttribute("HFlag", Boolean.TRUE);
    }


    public String getUserType() {
        String vUserType = null;
        FacesContext fctx = FacesContext.getCurrentInstance();
        ExternalContext ectx = fctx.getExternalContext();
        HttpSession userSession = (HttpSession) ectx.getSession(false);
        //vUserType = (String) userSession.getAttribute("SSV_UserType");
        vUserType = "ADMIN";
        return vUserType.toUpperCase();
    }

    public void Apply() {
        if (getDBTransaction().isDirty()) {
            getDBTransaction().commit();
            FacesMessage Message = new FacesMessage("Record Saved Successfully!");
            Message.setSeverity(FacesMessage.SEVERITY_INFO);
            FacesContext fc = FacesContext.getCurrentInstance();
            fc.addMessage(null, Message);
        }
    }

    public void DeleteCommit() {
        if (getDBTransaction().isDirty()) {
            getDBTransaction().commit();
            FacesMessage Message = new FacesMessage("Record has been deleted Successfully!");
            Message.setSeverity(FacesMessage.SEVERITY_INFO);
            FacesContext fc = FacesContext.getCurrentInstance();
            fc.addMessage(null, Message);
        }
    }

    public void Rollback() {
        getDBTransaction().rollback();
    }

    /**
     * Container's getter for FromUserVO1.
     * @return FromUserVO1
     */
    public ViewObjectImpl getFromUserVO1() {
        return (ViewObjectImpl) findViewObject("FromUserVO1");
    }

    /**
     * Container's getter for WfSetupDetailVO1.
     * @return WfSetupDetailVO1
     */
    public ViewObjectImpl getWfSetupDetailVO1() {
        return (ViewObjectImpl) findViewObject("WfSetupDetailVO1");
    }

    public void callWorkflow(Number p_document_id, String ApprovalType) {
        NUMBER vNotifId;
        Number p_wf_notif_id = null, p_wf_setup_id = null, p_form_id = null, p_from_user_id = null;
        String p_notification_message = "Approval Required for Plan Transfer Request.", p_status = null;

        ViewObject WfVO = this.getWfSetupDetailVO1();
        WfVO.setWhereClause("WORKFLOW_TYPE='" + ApprovalType + "'");
        WfVO.executeQuery();
        if (WfVO.getRowCount() == 0) {
            throw new JboException("Workflow Hierarchy does not exists.");
        } else if (WfVO.getRowCount() > 1) {
            throw new JboException("Multiple Workflow Hierarchy exists.");
        } else if (WfVO.getRowCount() == 1) {
            p_wf_setup_id = (Number) WfVO.first().getAttribute(0);
            p_form_id = (Number) WfVO.first().getAttribute(1);

            ViewObject vo = this.getDssPlanTransferHeaderView1();
            if (vo.getRowCount() == 0) {
                throw new JboException("Please select Agent to change Plan Transfer.");
            } else if (vo.getRowCount() > 0) {
                ViewObject FU = this.getFromUserVO1();
                FU.setWhereClause("TR_HEADER_ID_PK = " + p_document_id);
                FU.executeQuery();
                if (FU.getRowCount() == 1) {
                    p_from_user_id = (Number) FU.first().getAttribute(1);
                } else if (FU.getRowCount() == 0) {
                    throw new JboException("Manager does not exists.");
                } else if (FU.getRowCount() > 1) {
                    throw new JboException("Multiple Manager exists.");
                }
            }

            DBTransaction txn = getDBTransaction();
            OracleCallableStatement callableStatement = null;
            if ("BRANCH".equalsIgnoreCase(ApprovalType))
                callableStatement =
                    (OracleCallableStatement) txn.createCallableStatement("BEGIN DSS_SWF_PKG.CALL_WORKFLOW(:1, :2, :3, :4, :5, :6, :7, :8); END;",
                                                                          DBTransaction.DEFAULT);
            else if ("DSS".equalsIgnoreCase(ApprovalType))
                callableStatement =
                    (OracleCallableStatement) txn.createCallableStatement("BEGIN DSS_SWF_PKG.CALL_DSS_WORKFLOW(:1, :2, :3, :4, :5, :6, :7, :8); END;",
                                                                          DBTransaction.DEFAULT);
            try {
                callableStatement.setNUMBER(1, (NUMBER) p_document_id);
                callableStatement.setNUMBER(2, (NUMBER) p_wf_notif_id);
                callableStatement.setNUMBER(3, (NUMBER) p_wf_setup_id);
                callableStatement.setNUMBER(4, p_form_id);
                callableStatement.setNUMBER(5, p_from_user_id);
                callableStatement.setString(6, p_notification_message);
                callableStatement.setString(7, p_status);
                callableStatement.registerOutParameter(8, Types.NUMERIC);

                callableStatement.execute();
                vNotifId = callableStatement.getNUMBER(8);
                callableStatement.close();
                if (vNotifId != null) {
                    if ("BRANCH".equalsIgnoreCase(ApprovalType)) {
                        this.getDssPlanTransferHeaderView1().getCurrentRow().setAttribute("BranchStatus", "INPROCESS");
                        this.getDssPlanTransferHeaderView1().getCurrentRow().setAttribute("BranchNotifIdFk", vNotifId);
                    } else if ("DSS".equalsIgnoreCase(ApprovalType)) {
                        this.getDssPlanTransferHeaderView1().getCurrentRow().setAttribute("DssStatus", "INPROCESS");
                        this.getDssPlanTransferHeaderView1().getCurrentRow().setAttribute("DssNotifIdFk", vNotifId);
                    }
                    getDBTransaction().commit();
                }
            } catch (SQLException e) {
                throw new JboException(e.getMessage());
            }
        }
        this.getDssPlanTransferHeaderView1().executeQuery();
    }

    public void DssApprove() {
        ViewObject vo = this.getDssPlanTransferHeaderView1();
        vo.getCurrentRow().setAttribute("DssStatus", "APPROVED");
        getDBTransaction().commit();
    }

    public String SearchPolicy() {
        String vPolicies = null;
        ViewObject vo = getDssPlanTransferLineDetailsView2();
        if (vo.getRowCount() > 0) {
            Row r = vo.first();
            for (int i = 0; i < vo.getRowCount(); i++) {
                if (r.getAttribute("PolicyNo") != null) {
                    if (vPolicies == null) {
                        vPolicies = "'" + r.getAttribute("PolicyNo") + "'";
                    } else {
                        vPolicies = vPolicies + ",'" + r.getAttribute("PolicyNo") + "'";
                    }
                }
                if (vo.hasNext())
                    r = vo.next();
            }
        }
        return vPolicies;
    }

    /**
     * Container's getter for CommentsHeaderVO1.
     * @return CommentsHeaderVO1
     */
    public ViewObjectImpl getCommentsHeaderVO1() {
        return (ViewObjectImpl) findViewObject("CommentsHeaderVO1");
    }

    /**
     * Container's getter for DssPtCcCommentsView1.
     * @return DssPtCcCommentsView1
     */
    public ViewObjectImpl getDssPtCcCommentsView1() {
        return (ViewObjectImpl) findViewObject("DssPtCcCommentsView1");
    }

    /**
     * Container's getter for PtCommentsHdLineVL1.
     * @return PtCommentsHdLineVL1
     */
    public ViewLinkImpl getPtCommentsHdLineVL1() {
        return (ViewLinkImpl) findViewLink("PtCommentsHdLineVL1");
    }

    public void callPTRFWorkflow(Number p_document_id) {
        String vStatus = null, vMsg = null;

        DBTransaction txn = getDBTransaction();
        OracleCallableStatement callableStatement = null;

        callableStatement =
            (OracleCallableStatement) txn.createCallableStatement("BEGIN dss_all_pkg.CALL_PTRF_WORKFLOW(:1, :2, :3); END;",
                                                                  DBTransaction.DEFAULT);

        try {
            callableStatement.setNUMBER(1, (NUMBER) p_document_id);
            callableStatement.registerOutParameter(2, Types.VARCHAR);
            callableStatement.registerOutParameter(3, Types.VARCHAR);

            callableStatement.execute();

            vStatus = callableStatement.getString(2);
            vMsg = callableStatement.getString(3);

            callableStatement.close();
        } catch (SQLException e) {
            try {
                callableStatement.close();
            } catch (SQLException f) {
            }
            throw new JboException(e.getMessage());
        }

        FacesMessage Message = new FacesMessage(vMsg);
        if (vStatus.equalsIgnoreCase("N"))
            Message.setSeverity(FacesMessage.SEVERITY_ERROR);
        else
            Message.setSeverity(FacesMessage.SEVERITY_INFO);
        FacesContext fc = FacesContext.getCurrentInstance();
        fc.addMessage(null, Message);
        txn.rollback();
    }


    /**
     * Container's getter for DssPlanTransferHeaderView1.
     * @return DssPlanTransferHeaderView1
     */
    public DssPlanTransferHeaderViewImpl getDssPlanTransferHeaderView1() {
        return (DssPlanTransferHeaderViewImpl) findViewObject("DssPlanTransferHeaderView1");
    }

    /**
     * Container's getter for DssPlanTransferLinesView1.
     * @return DssPlanTransferLinesView1
     */
    public ViewObjectImpl getDssPlanTransferLinesView1() {
        return (ViewObjectImpl) findViewObject("DssPlanTransferLinesView1");
    }

    /**
     * Container's getter for TrHeaderFkLink1.
     * @return TrHeaderFkLink1
     */
    public ViewLinkImpl getTrHeaderFkLink1() {
        return (ViewLinkImpl) findViewLink("TrHeaderFkLink1");
    }


    /**
     * Container's getter for DssPlanTransferLineDetailsView2.
     * @return DssPlanTransferLineDetailsView2
     */
    public ViewObjectImpl getDssPlanTransferLineDetailsView2() {
        return (ViewObjectImpl) findViewObject("DssPlanTransferLineDetailsView2");
    }

    /**
     * Container's getter for TrLineIdFk1Link2.
     * @return TrLineIdFk1Link2
     */
    public ViewLinkImpl getTrLineIdFk1Link2() {
        return (ViewLinkImpl) findViewLink("TrLineIdFk1Link2");
    }

    /**
     * Container's getter for PolicyNoVoLOV1.
     * @return PolicyNoVoLOV1
     */
    public PolicyNoVoLOVImpl getPolicyNoVoLOV1() {
        return (PolicyNoVoLOVImpl) findViewObject("PolicyNoVoLOV1");
    }

    public void PopulatePolicy() {
        ViewObject LovVo = getPolicyNoVoLOV1();
        if (LovVo.getRowCount() > 0) {
            ViewObject DtlVo = getDssPlanTransferLineDetailsView2();
            Row r = LovVo.first();
            for (int i = 0; i < LovVo.getRowCount(); i++) {
                String selectFlag = "N";
                try {
                    selectFlag = r.getAttribute("SelectFlag") + "";
                } catch (NullPointerException e) {
                    selectFlag = "N";
                }
                if ("Y".equalsIgnoreCase(selectFlag)) {
                    DtlVo.last();
                    DtlVo.next();
                    Row Dro = DtlVo.getCurrentRow();
                    Dro = DtlVo.createRow();
                    Dro.setAttribute("PolicyNo", r.getAttribute("VPolicyNo"));
                    Dro.setAttribute("ParticipantName", r.getAttribute("VName"));
                    Dro.setAttribute("CommencementDate", r.getAttribute("DCommencement"));
                    Dro.setAttribute("RegularContribtion", r.getAttribute("NContribution"));
                    Dro.setAttribute("DueDateLastPayment", r.getAttribute("LastPaymentDate"));
                    Dro.setAttribute("Status", r.getAttribute("VStatusDesc"));
                    Dro.setAttribute("PlanMode", r.getAttribute("VPymtDesc"));
                    Dro.setAttribute("AgentNoFk", r.getAttribute("NAgentNo"));
                }
                if (LovVo.hasNext())
                    r = LovVo.next();

            }
        }
    }

    public void PupolatePolicyNo() {
        oracle.jbo.domain.Number HdrId = null;
        oracle.jbo.domain.Number AgentNofk = null;
        String PolicyNumber = null;
        
        ViewObject HdrVO = getDssPlanTransferHeaderView1();
        HdrId = (Number) HdrVO.getCurrentRow().getAttribute("TrHeaderIdPk");
        AgentNofk = (Number) HdrVO.getCurrentRow().getAttribute("FromAgentNoFk");
        
        ViewObject LineDtlVo = getDssPlanTransferLineDetailsView2();
        if (LineDtlVo.getRowCount() > 0) {
            Row r = LineDtlVo.first();
            for (int i = 0; i < LineDtlVo.getRowCount(); i++) {
                if (i == 0)
                    PolicyNumber = "'" + r.getAttribute("PolicyNo") + "'";
//                    PolicyNumber = ""+r.getAttribute("PolicyNo");
                else {
                    PolicyNumber = PolicyNumber + ", '" + r.getAttribute("PolicyNo") + "'";
//                    PolicyNumber = PolicyNumber + "," + r.getAttribute("PolicyNo");
                }
                if (LineDtlVo.hasNext())
                    r = LineDtlVo.next();
            }
        }
        
        PolicyNoVoLOVImpl LovVO = getPolicyNoVoLOV1();
        ViewCriteria vc = LovVO.getViewCriteria("PolicyNoVoLOVCriteria");
        LovVO.removeViewCriteria("PolicyNoVoLOVCriteria");
        LovVO.executeEmptyRowSet();
        LovVO.applyViewCriteria(vc);
        
        LovVO.setBV_AGENT_NO_FK(AgentNofk);
        LovVO.setBV_HDR_ID(HdrId);
        if (PolicyNumber != null)
            LovVO.setPolicyNo(PolicyNumber);
        else
        LovVO.setPolicyNo("'UL'");

//        LovVO.setNamedWhereClauseParam("BV_HDR_ID", HdrId);
//        LovVO.setNamedWhereClauseParam("BV_POLICY_NO", PolicyNumber);
//        LovVO.setNamedWhereClauseParam("BV_AGENT_NO_FK", AgentNofk);
//        LovVO.executeQuery();

//        this.getSession().getUserData().put("HeaderIdFk", HdrId);
//        this.getSession().getUserData().put("AgentNo", AgentNofk);
//        this.getSession().getUserData().put("Policyno", PolicyNumber);
    }
    //        vpol = (String) LineDtlVo.getCurrentRow().getAttribute("PolicyNo");
    //    this.getSession().getUserData().put("HeaderIdFk", vHdrId);
    //    this.getSession().getUserData().put("AgentNo", vAgentNoFk);
    //    this.getSession().getUserData().put("Policyno", vPolicyNo);


    /**
     * Container's getter for DssPtPsrCommentsHeaderQVO1.
     * @return DssPtPsrCommentsHeaderQVO1
     */
    public DssPtPsrCommentsHeaderQVOImpl getDssPtPsrCommentsHeaderQVO1() {
        return (DssPtPsrCommentsHeaderQVOImpl) findViewObject("DssPtPsrCommentsHeaderQVO1");
    }

    /**
     * Container's getter for DssPtPsrCommentsView1.
     * @return DssPtPsrCommentsView1
     */
    public ViewObjectImpl getDssPtPsrCommentsView1() {
        return (ViewObjectImpl) findViewObject("DssPtPsrCommentsView1");
    }

    /**
     * Container's getter for DssPsrCommentsVL1.
     * @return DssPsrCommentsVL1
     */
    public ViewLinkImpl getDssPsrCommentsVL1() {
        return (ViewLinkImpl) findViewLink("DssPsrCommentsVL1");
    }

    /**
     * Container's getter for DssPtPsrCcCommentsVO1.
     * @return DssPtPsrCcCommentsVO1
     */
    public ViewObjectImpl getDssPtPsrCcCommentsVO1() {
        return (ViewObjectImpl) findViewObject("DssPtPsrCcCommentsVO1");
    }

    /**
     * Container's getter for DssPtPsrCcCommentsVL1.
     * @return DssPtPsrCcCommentsVL1
     */
    public ViewLinkImpl getDssPtPsrCcCommentsVL1() {
        return (ViewLinkImpl) findViewLink("DssPtPsrCcCommentsVL1");
    }
}

